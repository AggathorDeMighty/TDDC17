public class StateAndReward {

	
	/* State discretization function for the angle controller */
	public static String getStateAngle(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */
		System.out.println(discretize(angle, 11, -2, 2));
		String state;
		
		if(0 <= angle && angle < Math.PI/2){
			state = "quadrant1";
		}
		else if(Math.PI/2 <= angle && angle < Math.PI){
			state = "quadrant2";
		}
		else if(angle <= -Math.PI/2 && -Math.PI < angle) {
			state = "quadrant3";
		}
		else if(angle <= 0 && -Math.PI/2 < angle){
			state = "quadrant4";
		}
		else {
			state = "Error";
			
		}
		return state;
	}

	/* Reward function for the angle controller */
	public static double getRewardAngle(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */
		double reward = 0;
		String currentAngleState = getStateAngle(angle, vx, vy);
		
		if(currentAngleState.equals("quadrant1")){
			reward = 10;
		}
		else if(currentAngleState.equals("quadrant2")){
			reward = -10;
		}
		else if(currentAngleState.equals("quadrant3")){
			reward = -10;
		}
		else if(currentAngleState.equals("quadrant4")){
			reward = 10;
		}
		return reward;
	}

	/* State discretization function for the full hover controller */
	public static String getStateHover(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */

		String state = "OneStateToRuleThemAll2";
		
		return state;
	}

	/* Reward function for the full hover controller */
	public static double getRewardHover(double angle, double vx, double vy) {

		/* TODO: IMPLEMENT THIS FUNCTION */
		
		double reward = 0;

		return reward;
	}

	// ///////////////////////////////////////////////////////////
	// discretize() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 1 and nrValues-2 is returned.
	//
	// Use discretize2() if you want a discretization method that does
	// not handle values lower than min and higher than max.
	// ///////////////////////////////////////////////////////////
	public static int discretize(double value, int nrValues, double min,
			double max) {
		if (nrValues < 2) {
			return 0;
		}

		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}
		
		double tempValue = value - min;
		double ratio = tempValue / diff;
		System.out.println("Diff: " + diff  + " Tempvalue: " + tempValue + " Ratio: " + ratio + " Angle sent in was = " + (Math.toDegrees(value)));

		return (int) (ratio * (nrValues - 2)) + 1;
	}

	// ///////////////////////////////////////////////////////////
	// discretize2() performs a uniform discretization of the
	// value parameter.
	// It returns an integer between 0 and nrValues-1.
	// The min and max parameters are used to specify the interval
	// for the discretization.
	// If the value is lower than min, 0 is returned
	// If the value is higher than min, nrValues-1 is returned
	// otherwise a value between 0 and nrValues-1 is returned.
	// ///////////////////////////////////////////////////////////
	public static int discretize2(double value, int nrValues, double min,
			double max) {
		double diff = max - min;

		if (value < min) {
			return 0;
		}
		if (value > max) {
			return nrValues - 1;
		}

		double tempValue = value - min;
		double ratio = tempValue / diff;

		return (int) (ratio * nrValues);
	}

}
